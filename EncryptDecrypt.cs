using System;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;
using System.Text;
using System.Threading.Tasks;

namespace CryptoStayPR
{
    class EncryptDecrypt
    {
        uint R, L, X;
        public EncryptDecrypt(ulong FileFragment, uint keyFragment)
        {
            R = (uint)(FileFragment >> 32);
            L = (uint)((FileFragment << 32) >> 32);
            X = keyFragment;
        }
        public ulong AllEncrypt(bool IsLastStep)
        {
            uint Per;
            Per = (uint)((X + R) % (Convert.ToUInt64(Math.Pow(2, 32))));
            uint S0, S1, S2, S3, S4, S5, S6, S7;

            S0 = Per >> 28;
            S1 = (Per << 4) >> 28;
            S2 = (Per << 8) >> 28;
            S3 = (Per << 12) >> 28;
            S4 = (Per << 16) >> 28;
            S5 = (Per << 20) >> 28;
            S6 = (Per << 24) >> 28;
            S7 = (Per << 28) >> 28;

            S0 = Table0[S0];
            S1 = Table0[0x10 + S1];
            S2 = Table0[0x20 + S2];
            S3 = Table0[0x30 + S3];
            S4 = Table0[0x40 + S4];
            S5 = Table0[0x50 + S5];
            S6 = Table0[0x60 + S6];
            S7 = Table0[0x70 + S7];

            Per = S7 + (S6 << 4) + (S5 << 8) + (S4 << 12) + (S3 << 16) + (S2 << 20) + (S1 << 24) + (S0 << 28);

            Per = (uint)(Per << 11) | (Per >> 21);
            ulong N;
            Per = (Per ^ L);

            if (!IsLastStep)
            {
                L = R;
                R = Per;
            }
            else
                L = Per;

            N = ((ulong)L) | (((ulong)R) << 32);
            return N;
        }
        internal static byte[] Table0
        {
            get
            {
                return Table;
            }
        }
        private static byte[] Table = {
                        0xC,0x4,0x6,0x2,0xA,0x5,0xB,0x9,0xE,0x8,0xD,0x7,0x0,0x3,0xF,0x1,
                        0x6,0x8,0x2,0x3,0x9,0xA,0x5,0xC,0x1,0xE,0x4,0x7,0xB,0xD,0x0,0xF,
                        0xB,0x3,0x5,0x8,0x2,0xF,0xA,0xD,0xE,0x1,0x7,0x4,0xC,0x9,0x6,0x0,
                        0xC,0x8,0x2,0x1,0xD,0x4,0xF,0x6,0x7,0x0,0xA,0x5,0x3,0xE,0x9,0xB,
                        0x7,0xF,0x5,0xA,0x8,0x1,0x6,0xD,0x0,0x9,0x3,0xE,0xB,0x4,0x2,0xC,
                        0x5,0xD,0xF,0x6,0x9,0x2,0xC,0xA,0xB,0x7,0x8,0x1,0x4,0x3,0xE,0x0,
                        0x8,0xE,0x2,0x5,0x6,0x9,0x1,0xC,0xF,0x4,0xB,0x0,0xD,0xA,0x3,0x7,
                        0x1,0x7,0xE,0xD,0x0,0x5,0x8,0x3,0x4,0xF,0xA,0x6,0x9,0xC,0xB,0x2
                };
    }
}

